project:
  type: website

# styling
brand: docs/_brand.yml

# content
website:
  title: "Dareplane"
  site-url: "https://bsdlab.github.io/Dareplane/" # makes site links work on your remote site
  navbar:
    # logo: assets/single_dareplane_logo.svg   # logo is defined in _brand.yml
    left:
      # - href: README.qmd
      #   text: Home
      - href: docs/main.qmd
        text: Home
      # - examples/examples.qmd
      # - reference/index.qmd # the api documentation
      # - docs/documentation_setup.qmd

    right:
      - icon: github
        menu:
          - text: Source Code
            href: https://github.com/bsdlab/Dareplane

  # sidebar:
  #   style: "docked"
  #   search: false
  #   contents:
  #     # - reference/index.qmd
  #     - auto: reference
# # tell quarto to read the generated sidebar
# metadata-files:
#   - reference/_sidebar.yml
#
# # tell quarto to read the generated styles
# format:
#   html:
#     css:
#       - reference/_styles-quartodoc.css
#
# quartodoc:
#   # the name used to import the package you want to create reference docs for
#   package: ""
#   out_index: _api_index.qmd
#
#   # write sidebar and style data -> where quartodoc writes its content without impacting quarto
#   sidebar: reference/_sidebar.yml
#   css: reference/_styles-quartodoc.css
#
#   sections:
#     - title: dareplane_utils
#       desc: Utility functions for Python regarding common components which can be usefull for multiple Dareplane modules.
#
#     - subtitle: Server
#       desc: The server components can be used from `dareplane_utils.default_server.server`
#       package: dareplane_utils.default_server.server
#       contents:
#         # the functions being documented in the package.
#         # you can refer to anything: class methods, modules, etc..
#         - DefaultServer
#
#     - subtitle: Logging
#       desc: |
#         Logging components which add a TCP handler to a logger derived from Python's standard `logging.Logger`. This allows to
#         the [dp-control-room](https://github.com/bsdlab/dp-control-room) to create a single consolidated log-file.
#
#       package: dareplane_utils.logging
#       contents:
#         # the functions being documented in the package.
#         # you can refer to anything: class methods, modules, etc..
#         - logger.get_logger
#         - server.LogRecordStreamHandler
#         - server.LogRecordSocketReceiver
#         - server.modify_root_logger
#
#     - subtitle: Streaming data
#       desc: |
#         Dareplane relies mostly on the [lab streaming layer (LSL)](https://labstreaminglayer.org/#/) for streaming data. A central element of the  [`dareplane-utils`](https://pypi.org/project/dareplane-utils/)
#         is the [`StreamWatcher`](https://github.com/matthiasdold/dareplane-pyutils/blob/main/src/dareplane_utils/stream_watcher/lsl_stream_watcher.py) which is a ring buffer to read from streams. Currently we only
#         have a `StreamWatcher` for LSL implemented, using `pylsl` and inlets defined therein.
#
#       package: dareplane_utils.stream_watcher.lsl_stream_watcher
#       contents:
#         # the functions being documented in the package.
#         # you can refer to anything: class methods, modules, etc..
#         - StreamWatcher
#         - get_streams_names
#         - pylsl_xmlelement_to_dict
#         - get_channel_names
#
#     - subtitle: General
#       desc: |
#         General utility functions and classes
#
#       package: dareplane_utils.general
#       contents:
#         # the functions being documented in the package.
#         # you can refer to anything: class methods, modules, etc..
#         - ringbuffer.RingBuffer
#         - time.sleep_s
#         - time.partial_sleep
#         - time.full_speed
#         - event_loop.EventLoop
